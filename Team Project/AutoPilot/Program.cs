using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace AutoPilot
{
    class Program
    {
        static private int width = 55;  //define width of animation screen as 55 pixels
        static private int height = 30;  //define height of animation screen as 30 pixels
        static private char[,] display;
        static private Random random = new Random();
        static void Main(string[] args)
        // ------------------------------------------------
        // Function Name: Main()
        // Input Argument: "string[] args"
        // Summary: Clears the console, sets the text color to green, then calls ready and go.
        // ------------------------------------------------
        {
            Console.ForegroundColor = ConsoleColor.Green; //set console color as green
            while (true) //while function Main() is running...
            {
                prepare_console(); //call function ready()
                draw_to_console(); //call function go()
                Console.Read(); // hit enter to execute the next iteration.
            }
        }
        static void prepare_console()
        // ------------------------------------------------
        // Function Name: prepare_console() (formerly "ready()")
        // Summary:
        // Defines display area, initiates a loop through lines of display.
        // For each line, pick a random number and assign it to variable "location".
        // Determine an X and Y grid coordinate based on the random numbers.
        // ------------------------------------------------
        {           
            display     = new char[height, width];                  // define new character at coordinates within "height" plane of defined display area

            int span    = 10;                                       // distance between two pipes representing borders of road
            int left    = 5;                                        // fix starting column for left pipe
            int right   = left + span;                              // set relative locaiton for right pipe
            int mid = left + span / 2;                              // set value matching the midpoint between left and right pipes

            for (int x = 0; x < height; x++)                        // loop through available rows while "x" is >= 0 but less than "height".

            {
                for (int y = 0; y < width; y++)                     // loop through available columns while "y" is >= 0 but less than "width".
                    display[x, y] = ' ';                            // fill background with blank spaces
                {
                    display[x, left] = '|';                         // set first pipe as left road margin
                    display[x, right] = '|';                        // set second pipe as right road margin

                    if ( x == height - 1)                           // check if current row is bottommost row
                        display[x, mid] = 'Ã–';                      // if yes, draw car (fyi, for windows, hold alt, type '0214', release alt- for osx, press and hold 'O')
                }
            }
        }

        static void draw_to_console()
        // ------------------------------------------------
        // Function Name: draw_to_console()
        // Summary: Paint game selections generated by "ready" function to the console line-by-line.
        // ------------------------------------------------    
        {
            StringBuilder paintAll = new StringBuilder(width * height); //define a new StringBuilder object with a capacity of width * height

            for (int x = 0; x < height; x++) // Loop through available rows while x is >= 0 but less than height.
            {
                for (int y = 0; y < width; y++) // Loop through available columns while y is >= 0 but less than width.
                {
                    paintAll.Append(display[x, y]); //invoke stringbuilder "paintAll" and append the character at coordinates [x,y] from the display array.
                }
                paintAll.AppendLine(); // Append a new line to the StringBuilder after each row is completed.
            }

            Console.SetCursorPosition(0, 0); // Set the cursor position to the top-left corner of the console.
            Console.Write(paintAll); // Write the contents of the StringBuilder to the console.
        }
    }
}